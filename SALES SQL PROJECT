-SALES SQL PROJECT

--SELECT *
--FROM SALES_TABLE


--  FIND THE NUMBER OF CUSTOMERS BY SEGMENT
--SELECT  [SEGMENT], COUNT([CUSTOMER ID]) AS SEGMENT_COUNT
--FROM SALES_TABLE
--GROUP BY [SEGMENT]
--ORDER BY 2 DESC

-- CALCULATE THE TOP 5 CUSTOMERS BY SALES
--SELECT TOP 5 [CUSTOMER NAME], [CUSTOMER ID], ROUND(SUM([SALES]), 0) AS TOTAL_SALES
--FROM SALES_TABLE
--GROUP BY [CUSTOMER NAME], [CUSTOMER ID]
--ORDER BY 3 DESC

-- RANK CUSTOMERS BY SALES
--SELECT [CUSTOMER NAME], ROUND(SUM(SALES), 0) AS TOTAL_SALES, RANK()OVER(ORDER BY SUM(SALES) DESC) AS SALES_RANK
--FROM SALES_TABLE
--GROUP BY [CUSTOMER NAME]

-- CALCULATE THE RUNNING TOTAL OF SALES
--SELECT [ORDER DATE], ROUND(SALES,2) AS SALES_TOT, SUM(SALES) OVER(ORDER BY [ORDER DATE]) AS RUNNING_TOTAL
--FROM SALES_TABLE
--WHERE [ORDER DATE] IS NOT NULL

-- IDENTIFY THE TOP 10% OF CUSTOMERS BY SALES
--SELECT TOP 79 [CUSTOMER NAME], SUM(SALES) AS TOTAL_SALES
--FROM SALES_TABLE
--GROUP BY [CUSTOMER NAME]
--ORDER BY 2 DESC
--LIMIT (SELECT COUNT(DISTINCT [CUSTOMER NAME]) *0.1 FROM SALES_TABLE)


-- CALCULATE SALES GROWTH RATE
-- WITH SALES_GROWTH
-- AS 
-- (
-- SELECT [ORDER DATE], SUM(SALES) AS TOTAL_SALES, 
--               LAG(SUM(SALES))OVER(ORDER BY [ORDER DATE]) AS TURN_OVER
--FROM SALES_TABLE
--              WHERE [ORDER DATE] IS NOT NULL
--GROUP BY [ORDER DATE]
--)
--SELECT [ORDER DATE], TOTAL_SALES, TURN_OVER,
--             ROUND((((TOTAL_SALES/TURN_OVER)- 1)*100), 2) AS SALES_GROWTH
--FROM SALES_GROWTH


--IDENTIFY PRODUCTS WITH SALES ABOVE AVERAGE
--SELECT [PRODUCT NAME], SALES
--FROM SALES_TABLE
--WHERE SALES > (SELECT AVG(SALES)
--               FROM SALES_TABLE)

--CALCULATE TOTAL SALES FOR EACH CUSTOMER SEGMENT
--SELECT [SEGMENT], ROUND(SUM(SALES), 2) AS TOTAL_SALES
--FROM SALES_TABLE
--GROUP BY [SEGMENT]

--IDENTIFY CUSTOMERS WITH SALES IN MULTIPLE CATEGORIES
--SELECT [CUSTOMER NAME], COUNT(DISTINCT CATEGORY) AS CATEGORY_COUNT
--FROM SALES_TABLE
--GROUP BY [CUSTOMER NAME]
--HAVING COUNT(DISTINCT CATEGORY) > 1

--CALCULATE STANDARD DEVIATION OF SALES
--SELECT ROUND(STDEV(SALES), 3) AS STD_DEV_SALES
--FROM SALES_TABLE

--IDENTIFY ORDERS WITH SALES ABOVE $1000 
--SELECT *
--FROM SALES_TABLE
--WHERE SALES>1000
--AND
--[ORDER DATE] IS NOT NULL

--SORT CUSTOMERS BY SALES IN DESCENDING ORDER AND LIMIT TO TOP 5
--SELECT TOP 5 [CUSTOMER NAME], SUM(SALES) AS TOTAL_SALES
--FROM SALES_TABLE
--GROUP BY [CUSTOMER NAME]
--ORDER BY 2 DESC

--CREATE AN INDEX ON THE SALES COLUMN
--CREATE INDEX IDX_SALE ON SALES_TABLE(SALES)

--CALCULATE THE MOVING AVERAGE OF SALES
--SELECT [ORDER DATE], SALES, ROUND(AVG(SALES)OVER
--(ORDER BY [ORDER DATE] ROWS 10 PRECEDING), 4) AS MOVING_AVG
--FROM SALES_TABLE
--WHERE [ORDER DATE] IS NOT NULL

--CALCULATE THE SEASONALITY OF SALES
--SELECT MONTH([ORDER DATE]) AS MONTH, YEAR([ORDER DATE]) AS YEAR
--FROM SALES_TABLE
--WHERE [ORDER DATE] IS NOT NULL
--ORDER BY 2
